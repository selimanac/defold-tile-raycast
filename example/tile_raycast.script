local debugdraw             = require "debug-draw.debug-draw"
local camera                = require "orthographic.camera"

local tilemap_url
local ray_start_url
local ray_end_url
local ray_from              = vmath.vector3(10, 10, 0)
local ray_to                = vmath.vector3(10, 10, 0)
local intersec              = vmath.vector3(10, 10, 0)

local CAMERA_ID             = hash("/camera")
local target_world_position = vmath.vector3(0, 0, 0)

local hit_result            = false

function init(self)
    msg.post(".", "acquire_input_focus")

    tilemap_url = msg.url("main:/tilemap#example")
    ray_start_url = msg.url("/ray_start")
    ray_end_url = msg.url("ray_end")

    -- movement stuff
    self.input = vmath.vector3()
    self.direction = vmath.vector3()
    self.speed = 0
    self.acceleration = 500
    self.deceleration = 1000
    self.max_speed = 500

    -- Y is down(It will be upside down)
    local tiles = {
        2, 2, 2, 2, 0, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 0, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 0, 2, 2, 2, 2, 2,
        2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        1, 2, 1, 2, 2, 2, 1, 1, 1, 1,
        1, 1, 1, 2, 2, 2, 1, 1, 1, 1,
        1, 1, 1, 2, 1, 2, 1, 3, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 2, 1,
        1, 1, 1, 2, 2, 2, 2, 1, 1, 3,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    }


    -- TileMap Settings
    local tile_width = 32
    local tile_height = 32
    local target_tiles = { 2, 3, 4 }
    local tilemap_width = 10
    local tilemap_height = 11

    -- You can get bounds from tilemap
    -- local _, _, tilemap_width, tilemap_height = tilemap.get_bounds(tilemap_url)

    -- Set tilemap
    local tile_id = 1

    for y = 1, tilemap_height do
        for x = 1, tilemap_width do
            tilemap.set_tile(tilemap_url, "layer1", x, y, tiles[tile_id])
            tile_id = tile_id + 1
        end
    end

    tile_raycast.setup(tile_width, tile_height, tilemap_width, tilemap_height, tiles, target_tiles)
end

function update(self, dt)
    -- movement stuff
    if self.input.x ~= 0 or self.input.y ~= 0 then
        self.direction = self.input
        self.speed = self.speed + self.acceleration * dt
        self.speed = math.min(self.speed, self.max_speed)
    else
        self.speed = self.speed - self.deceleration * dt
        self.speed = math.max(self.speed, 0)
    end
    ray_from = ray_from + self.direction * self.speed * dt
    go.set_position(ray_from, ray_start_url)
    self.input = vmath.vector3()

    -- ray hit and  results
    local hit, tile_x, tile_y, array_id, tile_id, intersection_x, intersection_y, side = tile_raycast.cast(ray_from.x, ray_from.y, target_world_position.x, target_world_position.y)

    if hit then
        intersec.x = intersection_x
        intersec.y = intersection_y
        msg.post("@render:", "draw_line", { start_point = ray_from, end_point = target_world_position, color = vmath.vector4(1, 0, 0, 1) })
        msg.post("@render:", "draw_line", { start_point = ray_from, end_point = intersec, color = vmath.vector4(1, 1, 0, 1) })
        debugdraw.circle(intersec.x, intersec.y, 15, debugdraw.COLORS.green)
        tilemap.set_tile(tilemap_url, "layer1", tile_x, tile_y, 4)

        if side == tile_raycast.LEFT then
            print("LEFT")
        elseif side == tile_raycast.RIGHT then
            print("RIGHT")
        elseif side == tile_raycast.TOP then
            print("TOP")
        elseif side == tile_raycast.BOTTOM then
            print("BOTTOM")
        end
    end
end

function on_input(self, action_id, action)
    if action.x or action.y then
        ray_to.x = action.x
        ray_to.y = action.y

        target_world_position = camera.screen_to_world(CAMERA_ID, ray_to)
    end




    go.set_position(target_world_position, ray_end_url)

    if action_id == hash("up") then
        self.input.y = 1
    elseif action_id == hash("down") then
        self.input.y = -1
    elseif action_id == hash("left") then
        self.input.x = -1
    elseif action_id == hash("right") then
        self.input.x = 1
    end
end
